#!/usr/bin/env bash
#
# Copy files for WP Enforcer into the project directory.

readonly BIN="$(cd "$(dirname "$0")" && pwd -P)"
readonly DIR="$BIN/$(dirname "$(readlink "$0")")"
readonly PROJECT="$(pwd)"
vip=false

# Define command-line options here.
# Follow -o with a comma-separated list of single-character option names.
# Follow -l with a comma-separated list of long option names.
# Options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o h -l help,vip -- "$@")
then
    # something went wrong, getopt will put out an error message for us
    exit 1
fi

while [ $# -gt 0 ]
do
    case $1 in
    -h|--help)
      echo "Usage: wp-enforcer [OPTION]...";
      echo "After adding wp-enforcer to a project with Composer, run this script to finish installation.";
      echo "";
      echo "  -h, --help    display this help and exit";
      echo "  --vip         install phpcs ruleset for wordpress.com vip";
      exit;;
    --vip)
      vip=true;
      break;;
    # For options with required arguments, an additional shift is required
    # -o|--option) myarg="$2" ; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*) break;;
    esac
    shift
done

# Display a confirmation message and return 0/1 based on the result.
confirm() {
  read -r -p "$1 [Y/n] " response
  response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

  if [[ "$response" == "y" ]]; then
    return 0
  fi

  return 1
}

# Copy the given hook into the project and make the script executable.
copy_hook() {
  local hook="$1"

  cp "$DIR"/hooks/"$hook" "$PROJECT"/.git/hooks/"$hook"
  chmod +x "$PROJECT"/.git/hooks/"$hook"
  echo "Copying $hook hook"
}

# Trigger an error and exit, but also tell users how they can re-run the script.
error() {
  echo
  echo "Error: $1" >&2
  echo "You may re-run this setup at any time by running $DIR/wp-enforcer"
  echo
  exit 1;
}

echo "Installing WP Enforcer..."

# Check that the target Git repository exists
if [[ ! -d "$PROJECT"/.git ]]; then
  error "No .git directory found in your project, unable to copy Git hooks!"
fi

# Verify that the hooks/ directory exists within .git/
if [[ ! -d "$PROJECT"/.git/hooks ]]; then
  echo "Creating hooks/ directory in Git repository"
  mkdir "$PROJECT"/.git/hooks
fi

# Copy git hooks, ensuring we're not overwriting anything unexpectedly.
if [[ -f "$PROJECT"/.git/hooks/pre-commit ]]; then

  # Diff the files and only prompt if they're different
  if ! cmp "$DIR"/hooks/pre-commit "$PROJECT"/.git/hooks/pre-commit >/dev/null 2>&1; then
    echo "A pre-commit hook already exists in $PROJECT/.git/hooks/pre-commit."
    if confirm "Overwrite the existing file?"; then
      copy_hook "pre-commit"
    fi
  else
    echo "pre-commit hook already exists, skipping"
  fi

else
  copy_hook "pre-commit"
fi

# Copy the PHP CodeSniffer standards file
if [[ ! -f "$PROJECT"/phpcs.xml ]]; then
  if [ "$vip" = false ]; then
    sample_file_name="phpcs.xml.sample"
  else
    sample_file_name="phpcs-vip.xml.sample"
  fi
  cp "$DIR"/../"$sample_file_name" "$PROJECT"/phpcs.xml
  echo "Created sample phpcs.xml file"
fi

# Configure PHP CodeSniffer
installed_paths="$("$BIN"/phpcs --config-show | grep "installed_paths:")"
if [[ "$installed_paths" != "installed_paths: ../../wp-coding-standards/wpcs" ]]; then
  "$BIN"/phpcs --config-set installed_paths ../../wp-coding-standards/wpcs
fi

echo
echo "WP Enforcer installed successfully!"
exit 0
